# Generated from Decaf.g4 by ANTLR 4.9.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO



def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2+")
        buf.write("\u00f6\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%")
        buf.write("\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\3\2\3\2\3")
        buf.write("\2\3\2\3\2\3\2\3\3\3\3\3\4\3\4\3\5\3\5\3\6\3\6\3\7\3\7")
        buf.write("\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\t\3\t\3\t\3\t\3\n\3\n\3")
        buf.write("\n\3\n\3\n\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\f")
        buf.write("\3\f\3\r\3\r\3\16\3\16\3\17\3\17\3\17\3\17\3\17\3\20\3")
        buf.write("\20\3\20\3\21\3\21\3\21\3\21\3\21\3\22\3\22\3\22\3\22")
        buf.write("\3\22\3\22\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\24\3\24")
        buf.write("\3\25\3\25\3\26\3\26\3\27\3\27\3\30\3\30\3\31\3\31\3\32")
        buf.write("\3\32\3\32\3\33\3\33\3\33\3\34\3\34\3\34\3\35\3\35\3\35")
        buf.write("\3\36\3\36\3\37\3\37\3 \3 \3!\3!\3\"\3\"\3\"\3#\3#\3#")
        buf.write("\3$\3$\3%\3%\3%\3%\3%\3&\3&\3&\3&\3&\3&\3\'\3\'\3(\3(")
        buf.write("\3)\3)\3)\7)\u00dc\n)\f)\16)\u00df\13)\3*\3*\7*\u00e3")
        buf.write("\n*\f*\16*\u00e6\13*\3+\3+\3+\3+\5+\u00ec\n+\3+\3+\3,")
        buf.write("\6,\u00f1\n,\r,\16,\u00f2\3,\3,\2\2-\3\3\5\4\7\5\t\6\13")
        buf.write("\7\r\b\17\t\21\n\23\13\25\f\27\r\31\16\33\17\35\20\37")
        buf.write("\21!\22#\23%\24\'\25)\26+\27-\30/\31\61\32\63\33\65\34")
        buf.write("\67\359\36;\37= ?!A\"C#E$G%I&K\'M\2O\2Q(S)U*W+\3\2\6\5")
        buf.write("\2C\\aac|\6\2\f\f\17\17))^^\4\2))^^\5\2\13\f\16\17\"\"")
        buf.write("\2\u00f8\2\3\3\2\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2")
        buf.write("\2\2\13\3\2\2\2\2\r\3\2\2\2\2\17\3\2\2\2\2\21\3\2\2\2")
        buf.write("\2\23\3\2\2\2\2\25\3\2\2\2\2\27\3\2\2\2\2\31\3\2\2\2\2")
        buf.write("\33\3\2\2\2\2\35\3\2\2\2\2\37\3\2\2\2\2!\3\2\2\2\2#\3")
        buf.write("\2\2\2\2%\3\2\2\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2")
        buf.write("-\3\2\2\2\2/\3\2\2\2\2\61\3\2\2\2\2\63\3\2\2\2\2\65\3")
        buf.write("\2\2\2\2\67\3\2\2\2\29\3\2\2\2\2;\3\2\2\2\2=\3\2\2\2\2")
        buf.write("?\3\2\2\2\2A\3\2\2\2\2C\3\2\2\2\2E\3\2\2\2\2G\3\2\2\2")
        buf.write("\2I\3\2\2\2\2K\3\2\2\2\2Q\3\2\2\2\2S\3\2\2\2\2U\3\2\2")
        buf.write("\2\2W\3\2\2\2\3Y\3\2\2\2\5_\3\2\2\2\7a\3\2\2\2\tc\3\2")
        buf.write("\2\2\13e\3\2\2\2\rg\3\2\2\2\17i\3\2\2\2\21p\3\2\2\2\23")
        buf.write("t\3\2\2\2\25y\3\2\2\2\27\u0081\3\2\2\2\31\u0083\3\2\2")
        buf.write("\2\33\u0085\3\2\2\2\35\u0087\3\2\2\2\37\u008c\3\2\2\2")
        buf.write("!\u008f\3\2\2\2#\u0094\3\2\2\2%\u009a\3\2\2\2\'\u00a1")
        buf.write("\3\2\2\2)\u00a3\3\2\2\2+\u00a5\3\2\2\2-\u00a7\3\2\2\2")
        buf.write("/\u00a9\3\2\2\2\61\u00ab\3\2\2\2\63\u00ad\3\2\2\2\65\u00b0")
        buf.write("\3\2\2\2\67\u00b3\3\2\2\29\u00b6\3\2\2\2;\u00b9\3\2\2")
        buf.write("\2=\u00bb\3\2\2\2?\u00bd\3\2\2\2A\u00bf\3\2\2\2C\u00c1")
        buf.write("\3\2\2\2E\u00c4\3\2\2\2G\u00c7\3\2\2\2I\u00c9\3\2\2\2")
        buf.write("K\u00ce\3\2\2\2M\u00d4\3\2\2\2O\u00d6\3\2\2\2Q\u00d8\3")
        buf.write("\2\2\2S\u00e0\3\2\2\2U\u00e7\3\2\2\2W\u00f0\3\2\2\2YZ")
        buf.write("\7e\2\2Z[\7n\2\2[\\\7c\2\2\\]\7u\2\2]^\7u\2\2^\4\3\2\2")
        buf.write("\2_`\7}\2\2`\6\3\2\2\2ab\7\177\2\2b\b\3\2\2\2cd\7=\2\2")
        buf.write("d\n\3\2\2\2ef\7]\2\2f\f\3\2\2\2gh\7_\2\2h\16\3\2\2\2i")
        buf.write("j\7u\2\2jk\7v\2\2kl\7t\2\2lm\7w\2\2mn\7e\2\2no\7v\2\2")
        buf.write("o\20\3\2\2\2pq\7k\2\2qr\7p\2\2rs\7v\2\2s\22\3\2\2\2tu")
        buf.write("\7e\2\2uv\7j\2\2vw\7c\2\2wx\7t\2\2x\24\3\2\2\2yz\7d\2")
        buf.write("\2z{\7q\2\2{|\7q\2\2|}\7n\2\2}~\7g\2\2~\177\7c\2\2\177")
        buf.write("\u0080\7p\2\2\u0080\26\3\2\2\2\u0081\u0082\7*\2\2\u0082")
        buf.write("\30\3\2\2\2\u0083\u0084\7.\2\2\u0084\32\3\2\2\2\u0085")
        buf.write("\u0086\7+\2\2\u0086\34\3\2\2\2\u0087\u0088\7x\2\2\u0088")
        buf.write("\u0089\7q\2\2\u0089\u008a\7k\2\2\u008a\u008b\7f\2\2\u008b")
        buf.write("\36\3\2\2\2\u008c\u008d\7k\2\2\u008d\u008e\7h\2\2\u008e")
        buf.write(" \3\2\2\2\u008f\u0090\7g\2\2\u0090\u0091\7n\2\2\u0091")
        buf.write("\u0092\7u\2\2\u0092\u0093\7g\2\2\u0093\"\3\2\2\2\u0094")
        buf.write("\u0095\7y\2\2\u0095\u0096\7j\2\2\u0096\u0097\7k\2\2\u0097")
        buf.write("\u0098\7n\2\2\u0098\u0099\7g\2\2\u0099$\3\2\2\2\u009a")
        buf.write("\u009b\7t\2\2\u009b\u009c\7g\2\2\u009c\u009d\7v\2\2\u009d")
        buf.write("\u009e\7w\2\2\u009e\u009f\7t\2\2\u009f\u00a0\7p\2\2\u00a0")
        buf.write("&\3\2\2\2\u00a1\u00a2\7?\2\2\u00a2(\3\2\2\2\u00a3\u00a4")
        buf.write("\7\60\2\2\u00a4*\3\2\2\2\u00a5\u00a6\7/\2\2\u00a6,\3\2")
        buf.write("\2\2\u00a7\u00a8\7#\2\2\u00a8.\3\2\2\2\u00a9\u00aa\7>")
        buf.write("\2\2\u00aa\60\3\2\2\2\u00ab\u00ac\7@\2\2\u00ac\62\3\2")
        buf.write("\2\2\u00ad\u00ae\7>\2\2\u00ae\u00af\7?\2\2\u00af\64\3")
        buf.write("\2\2\2\u00b0\u00b1\7@\2\2\u00b1\u00b2\7?\2\2\u00b2\66")
        buf.write("\3\2\2\2\u00b3\u00b4\7?\2\2\u00b4\u00b5\7?\2\2\u00b58")
        buf.write("\3\2\2\2\u00b6\u00b7\7#\2\2\u00b7\u00b8\7?\2\2\u00b8:")
        buf.write("\3\2\2\2\u00b9\u00ba\7,\2\2\u00ba<\3\2\2\2\u00bb\u00bc")
        buf.write("\7\61\2\2\u00bc>\3\2\2\2\u00bd\u00be\7\'\2\2\u00be@\3")
        buf.write("\2\2\2\u00bf\u00c0\7-\2\2\u00c0B\3\2\2\2\u00c1\u00c2\7")
        buf.write("(\2\2\u00c2\u00c3\7(\2\2\u00c3D\3\2\2\2\u00c4\u00c5\7")
        buf.write("~\2\2\u00c5\u00c6\7~\2\2\u00c6F\3\2\2\2\u00c7\u00c8\7")
        buf.write(")\2\2\u00c8H\3\2\2\2\u00c9\u00ca\7v\2\2\u00ca\u00cb\7")
        buf.write("t\2\2\u00cb\u00cc\7w\2\2\u00cc\u00cd\7g\2\2\u00cdJ\3\2")
        buf.write("\2\2\u00ce\u00cf\7h\2\2\u00cf\u00d0\7c\2\2\u00d0\u00d1")
        buf.write("\7n\2\2\u00d1\u00d2\7u\2\2\u00d2\u00d3\7g\2\2\u00d3L\3")
        buf.write("\2\2\2\u00d4\u00d5\4\62;\2\u00d5N\3\2\2\2\u00d6\u00d7")
        buf.write("\t\2\2\2\u00d7P\3\2\2\2\u00d8\u00dd\5O(\2\u00d9\u00dc")
        buf.write("\5O(\2\u00da\u00dc\5M\'\2\u00db\u00d9\3\2\2\2\u00db\u00da")
        buf.write("\3\2\2\2\u00dc\u00df\3\2\2\2\u00dd\u00db\3\2\2\2\u00dd")
        buf.write("\u00de\3\2\2\2\u00deR\3\2\2\2\u00df\u00dd\3\2\2\2\u00e0")
        buf.write("\u00e4\5M\'\2\u00e1\u00e3\5M\'\2\u00e2\u00e1\3\2\2\2\u00e3")
        buf.write("\u00e6\3\2\2\2\u00e4\u00e2\3\2\2\2\u00e4\u00e5\3\2\2\2")
        buf.write("\u00e5T\3\2\2\2\u00e6\u00e4\3\2\2\2\u00e7\u00eb\7)\2\2")
        buf.write("\u00e8\u00ec\n\3\2\2\u00e9\u00ea\7^\2\2\u00ea\u00ec\t")
        buf.write("\4\2\2\u00eb\u00e8\3\2\2\2\u00eb\u00e9\3\2\2\2\u00ec\u00ed")
        buf.write("\3\2\2\2\u00ed\u00ee\7)\2\2\u00eeV\3\2\2\2\u00ef\u00f1")
        buf.write("\t\5\2\2\u00f0\u00ef\3\2\2\2\u00f1\u00f2\3\2\2\2\u00f2")
        buf.write("\u00f0\3\2\2\2\u00f2\u00f3\3\2\2\2\u00f3\u00f4\3\2\2\2")
        buf.write("\u00f4\u00f5\b,\2\2\u00f5X\3\2\2\2\b\2\u00db\u00dd\u00e4")
        buf.write("\u00eb\u00f2\3\b\2\2")
        return buf.getvalue()


class DecafLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    T__32 = 33
    T__33 = 34
    T__34 = 35
    T__35 = 36
    T__36 = 37
    ID = 38
    NUM = 39
    CHAR = 40
    SPACE = 41

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'class'", "'{'", "'}'", "';'", "'['", "']'", "'struct'", "'int'", 
            "'char'", "'boolean'", "'('", "','", "')'", "'void'", "'if'", 
            "'else'", "'while'", "'return'", "'='", "'.'", "'-'", "'!'", 
            "'<'", "'>'", "'<='", "'>='", "'=='", "'!='", "'*'", "'/'", 
            "'%'", "'+'", "'&&'", "'||'", "'''", "'true'", "'false'" ]

    symbolicNames = [ "<INVALID>",
            "ID", "NUM", "CHAR", "SPACE" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", 
                  "T__32", "T__33", "T__34", "T__35", "T__36", "DIGIT", 
                  "LETTER", "ID", "NUM", "CHAR", "SPACE" ]

    grammarFileName = "Decaf.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


